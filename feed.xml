<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>tzemanovic.github.io blog</title>
    <link href="https://tzemanovic.github.io/feed.xml" rel="self" />
    <link href="https://tzemanovic.github.io" />
    <id>https://tzemanovic.github.io/feed.xml</id>
    <author>
        <name>Tomas Zemanovic</name>
        <email>tzemanovic@gmail.com</email>
    </author>
    <updated>2018-06-06T00:00:00Z</updated>
    <entry>
    <title>Migration to GitLab</title>
    <link href="https://tzemanovic.github.io/posts/migration-to-gitlab/index.html" />
    <id>https://tzemanovic.github.io/posts/migration-to-gitlab/index.html</id>
    <published>2018-06-06T00:00:00Z</published>
    <updated>2018-06-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>For no reason in particular at all :), I moved my website over to GitLab pages from GitHub pages. On the way, I got a pleasant surprise with the integrated CI/CD, which made it really easy to replace my <a href="https://github.com/tzemanovic/tzemanovic/blob/2f55be06722f1e13a030d02a988a1d9abcc5b287/src/publish.sh">release script</a> that simply pushed built project into another repository that was hosting the page with <a href="https://gitlab.com/tzemanovic/tzemanovic.gitlab.io/blob/master/.gitlab-ci.yml">a job configuration that handles build and release in the same repository</a>, nice and easy.</p>]]></summary>
</entry>
<entry>
    <title>Functional programming for beginners</title>
    <link href="https://tzemanovic.github.io/posts/functional-programming-for-beginners/index.html" />
    <id>https://tzemanovic.github.io/posts/functional-programming-for-beginners/index.html</id>
    <published>2018-03-19T00:00:00Z</published>
    <updated>2018-03-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Recently, I attended <a href="http://justtesting.org" target="_blank">Manuel Chakravarty</a>’s YOW! night talk titled Demystifying Functional Programming, which inspired me to write this post.</p>
<p>From my work, I gained some intuition that trying to teach <abbr data-toggle="tooltip" title="functional programming">FP</abbr> by explaining the theory first didn’t work well. In hindsight, this seems almost obvious. A lot of us were taught math this way and sadly it has left many of us misunderstanding math or even despising it, even though it might be very useful in their chosen field<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>.</p>
<p>What worked better was to show how elegantly FP solves many problems we were focusing on; one that required a use of parsers or another for which we were using reactive programming to process and analyse large quantities of data in real-time. These were some of the concepts I’ve learned in Haskell and was able to apply in Scala. They were harder to implement in the imperative way, which only complected them and that also made them harder to understand.</p>
<p>My intuition really aligned with the content of Manuel’s talk. With his long-time experience and commitment to working with and teaching Haskell, Manuel discussed what we can do to advance FP from the stage of innovators and early adopters to early majority<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>, which he summarised as:</p>
<ul>
<li>Examples first</li>
<li>Teach design patterns</li>
<li>Tight feedback loop</li>
<li>Visualisation can be an effective tool</li>
</ul>
<p>Another seasoned Haskeller Gabriel Gonzalez has written some great advice for Haskell beginners<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>, in which he recommends to:</p>
<ul>
<li>Avoid big-design-up-front</li>
<li>Start programming at term-level (using simple values and functions)</li>
<li>Build something useful</li>
</ul>
<p>If you gave Haskell a try, but still find it too intimidating, I would recommend you having a look at Elm. Elm (which itself is written in Haskell) is a very small language in terms of the size of its grammar, which makes it a perfect fit for beginners. Not only is it very good at all the points above, it can also compete with other front-end frameworks like React. The whole notion of languages being general-purpose can be quite misleading<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a>, Elm is intentionally not a general-purpose language<a href="#fn5" class="footnoteRef" id="fnref5"><sup>5</sup></a> and it serves its intended purpose very well. You don’t have to take my word for it though, instead, you can watch a <a href="https://youtu.be/EStQa0QsUb8" target="_blank">talk by Richard Feldman</a>, who’s been using both React and Elm side-by-side in production for over a year.</p>
<p>Cool, you got me, but…</p>
<h2 id="where-do-you-start">Where do you start?</h2>
<div class="figure">
<p><img src="/images/elm-grove.jpg" alt="Welcome to Elm" style="width: 100%"></p>
</div>
<p>Of course, not everyone learns the same way. As a general recommendation I would say:</p>
<p>Try not to learn too many things at once, keep things simple. This is especially important if you come to FP <strong>with prior experience</strong> from imperative languages, which doesn’t translate well into FP concepts. You might have heard functional programmers say that when you start, you will have to unlearn things, and this is what they’re referring to. Honestly, you will need patience, because everything might seem slow at first. That’s okay, don’t give up and keep at it!</p>
<p>Try to find someone who already has experience with FP and ask them for help with writing something simple. When you see FP applied to solving a real problem, you are very likely to learn faster. There are people who say they were able to pick up Elm this way within a week, but don’t set your expectations too high. Once again, everyone’s learning path is different. Look for FP <a href="https://www.meetup.com/" target="_target">meetups</a> in your area, join <a href="https://elmlang.herokuapp.com/" target="_blank">Elm on Slack</a>, read the comprehensive <a href="https://guide.elm-lang.org/" target="_blank">Elm Guide</a>. Don’t start trying to write a full-blown single page app, there are ways to <a href="http://elm-lang.org/blog/how-to-use-elm-at-work" target="_blank">gradually introduce Elm at work today</a>. Or you can just play around <a href="http://ellie-app.com/" target="_blank">directly from your browser</a>, you don’t even have to install anything.</p>
<p>Lastly, don’t be afraid to make mistakes, for it’s an important part of any learning process.</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p><a href="https://lamport.azurewebsites.net/tla/math-knowledge.html" target="_blank">Leslie Lamport: Why Don’t Computer Scientists Learn Math?</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="https://en.wikipedia.org/wiki/Diffusion_of_innovations" target="_blank">Wikipedia: Diffusion of innovations</a><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p><a href="http://www.haskellforall.com/2017/10/advice-for-haskell-beginners.html" target="_blank">Gabriel Gonzalez: Advice for Haskell beginners</a><a href="#fnref3">↩</a></p></li>
<li id="fn4"><p><a href="http://worrydream.com/ClimateChange/#tools-modeling" target="_blank">Bret Victor: What can a technologist do about climate change? A personal view.</a><a href="#fnref4">↩</a></p></li>
<li id="fn5"><p><a href="https://github.com/elm-lang/projects/blob/master/notes/on-general-purpose.md" target="_blank">Evan Czaplicki: On “General-Purpose” Languages</a><a href="#fnref5">↩</a></p></li>
</ol>
</div>]]></summary>
</entry>
<entry>
    <title>One year of Elm in production</title>
    <link href="https://tzemanovic.github.io/posts/one-year-of-elm-in-production/index.html" />
    <id>https://tzemanovic.github.io/posts/one-year-of-elm-in-production/index.html</id>
    <published>2018-03-06T00:00:00Z</published>
    <updated>2018-03-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>About a year ago, I started a new job where I build tools aimed at helping others provide a better user experience. As is common in the software industry, I inherited lots of poor vanilla JavaScript code. There were no tests, very little code structure or code re-use, mixed coding styles and as expected, a full menagerie of bugs, which frequently cropped up resulting in very poor user experience. With such a sorry state of things, it only made sense to try to take a wholly different approach - stop writing JavaScript and instead pick a higher level language that would make sure all the things are kept in check.</p>
<p>As a functional programming enthusiast, I’ve been a keen user of Elm for some time and although I conceptually liked it better before version 0.17 with its higher-level abstraction of rendering visual elements contained in <a href="http://package.elm-lang.org/packages/evancz/elm-graphics/1.0.1" target="_blank">elm-graphics library</a>, the inclusion of HTML library made it possible to integrate it into existing front-end ecosystem with much less friction to the point where it actually became one of the top choices.</p>
<p>If Elm code looks terrifyingly unfamiliar to you, fear not. It builds on top of very mature ML (Meta Language) family of programming languages. Elm itself is written in Haskell, which is as old as programming itself, but you can find a plethora of languages in this family:</p>
<table class="table">
<tbody>
<tr class="odd">
<td align="right">
<a href="http://www.purescript.org/" target="_blank">PureScript</a>
</td>
<td>
front-end language, more similar to Haskell
</td>
</tr>
<tr class="even">
<td align="right">
<a href="https://www.idris-lang.org/" target="_blank">Idris</a>
</td>
<td>
general purpose language similar to Haskell, but with dependent types
</td>
</tr>
<tr class="odd">
<td align="right">
<a href="https://www.scala-lang.org/" target="_blank">Scala</a>
</td>
<td>
fusion of FP with OOP for the JVM
</td>
</tr>
<tr class="even">
<td align="right">
<a href="http://www.frege-lang.org/" target="_blank">Frege</a>
</td>
<td>
Haskell for the JVM
</td>
</tr>
<tr class="odd">
<td align="right">
<a href="https://eta-lang.org/" target="_blank">Eta</a>
</td>
<td>
Haskell for the JVM
</td>
</tr>
<tr class="even">
<td align="right">
<a href="https://ocaml.org/" target="_blank">OCaml</a>
</td>
<td>
FP with OOP
</td>
</tr>
<tr class="odd">
<td align="right">
<a href="http://fsharp.org/" target="_blank">F#</a>
</td>
<td>
Microsoft’s FP with OOP
</td>
</tr>
<tr class="even">
<td align="right">
<a href="https://github.com/Morgan-Stanley/hobbes" target="_blank">Hobbes</a>
</td>
<td>
custom language built for embedding in C++
</td>
</tr>
<tr class="odd">
<td align="right">
<a href="http://sml-family.org/" target="_blank">Standard ML</a>
</td>
<td>
general purpose popular language for compilers
</td>
</tr>
<tr class="even">
<td align="right">
</td>
<td>
</td>
</tr>
</tbody>
</table>
<p>As processors scaling predicted by Moore’s law is close to reaching its hard physical limits (as Herb Sutter famously put it the free lunch is over<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>), the software industry will have to reach to tools that are better suited for dealing with concurrency. And these tools are functional programming languages. The interesting thing is that even if your application has no need to deal with concurrency, it can still benefit from FP, its foundation in mathematical concepts scares a lot people off, but it is its strong point. If the word mathematical puts you off, know that you don’t actually have to know about this to take advantage of it, just like you won’t fly off a rollercoaster if you don’t know its physics (anecdotally, it will probably be your last ride if the rollercoaster has been built with complete ignorance of physics).</p>
<p>As most of software development education and training focuses on OOP, there are lots of developers who get the impression that thinking about things in terms of objects is somehow natural. But the limitation of this mindset becomes very apparent in a very popular OOP topic - Gang of Four’s design patterns<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>. It also becomes apparent when implementation becomes so complex that no one can or even wants to work with it anymore. But where does this complexity come from, is it intrinsic to the problem domain? Most programmers know that tight coupling between unrelated concepts creates problems, in the same spirit I would say that the interleaving of data with behavior inside classes can create more problems than it solves. The declarative nature of FP languages removes much of the incidental complexity, the elephant we’re dragging around<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>, introduced by imperative programs because we don’t need to think about execution to understand what is going on. In more conceptual words of professor Philip Wadler, some languages were discovered while others were invented<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a> and you can tell.</p>
<p>The nice thing about Elm is that the community that has formed around it is very inclusive and welcoming. The language itself is very beginner friendly, to the point where some mistake its simplicity for a toy language. Don’t make the same mistake though, because Elm is up there with big names such as React, in fact, it is much more a complete solution than React. The simplicity of Elm is rooted in hard work that has been put into its design.</p>
<p>Once you familiarize yourself with it, the Elm compiler will be your best friend. Its error messages are so clear and helpful that they’ve influenced other languages, such as Rust. The language comes with a package manager <a href="https://github.com/elm-lang/elm-package" target="_blank">elm-package</a> and the libraries released in Elm automatically adhere to semantic versioning. You can even use it to <a href="https://github.com/elm-lang/elm-package#updating-dependencies" target="_blank">check what has changed between different versions of a given package</a>. For interactive coding, there is <a href="https://github.com/elm-lang/elm-repl" target="_blank">elm-repl</a> and <a href="https://github.com/elm-lang/elm-reactor" target="_blank">elm-reactor</a>. The performance of Elm generated code is great and when needed optimization is a simple function call away.</p>
<p>So far, Elm’s simple yet powerful design has helped us to stay focused on our goal of building a great product and we expect that the payoff will be even greater in the long run. At the moment, we have about 16k Elm lines of code in production, steadily translating pleasant development experience into pleasant user experience and we have more on their way.</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p><a href="http://www.gotw.ca/publications/concurrency-ddj.htm" target="_blank">Herb Sutter: The Free Lunch Is Over</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="https://youtu.be/oB8jN68KGcU" target="_blank">Ted Newark: Why Functional Programming Matters @ Devoxx Poland 2016</a><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p><a href="https://youtu.be/rI8tNMsozo0" target="_blank">Rich Hickey: Simplicity Matters keynote @ Rails Conf 2012 </a><a href="#fnref3">↩</a></p></li>
<li id="fn4"><p><a href="https://youtu.be/IOiZatlZtGU" target="_blank">Philip Wadler: Propositions as Types @ Strange Loop 2015</a><a href="#fnref4">↩</a></p></li>
</ol>
</div>]]></summary>
</entry>
<entry>
    <title>Custom domain site hosted on Github</title>
    <link href="https://tzemanovic.github.io/posts/custom-domain-site-hosted-on-github/index.html" />
    <id>https://tzemanovic.github.io/posts/custom-domain-site-hosted-on-github/index.html</id>
    <published>2014-05-10T00:00:00Z</published>
    <updated>2014-05-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>This website is hosted on <a href="https://github.com/maseek/maseek-codes" target="_blank">github</a>. It’s free, fast and reliable. You can only host static websites on github, but that’s not an issue if you use static site generator like <a href="http://jekyllrb.com/" target="_blank">Jekyll</a>, or if you, like me, prefer using Haskell, there’s Jekyll’s good twin <a href="http://jaspervdj.be/hakyll/" target="_blank">Hakyll</a>.</p>
<p>To redirect your custom domain to the github page, you need to lookup the DNS for A Record IP, using either <code>dig</code> command or <a href="http://www.dnsqueries.com/en/dns_lookup.php" target="_blank">online DNS lookup tool</a>. Then use the IP address you found to create A Record for your domain. Consult the <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages" target="_blank">github documentation</a> if you need more details.</p>
<p>To redirect the github page to your custom domain create a <strong>CNAME</strong> file in the github pages repo and put your domain name in it (e.g. <a href="http://maseek.codes">maseek.codes</a>)</p>
<p>It is handy to create a <em>one-click</em> publish shell script. Here is mine:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="co">#!/bin/bash</span>

<span class="co"># Create _publish directory if it doesn&#39;t exits</span>
<span class="fu">mkdir</span> -p _publish
<span class="bu">cd</span> _publish

<span class="co"># Clone the giuthub page repo or pull the latest version</span>
<span class="kw">if</span><span class="bu"> [</span> <span class="ot">!</span> <span class="ot">-d</span> <span class="st">&quot;maseek.github.io&quot;</span><span class="bu"> ]</span>; <span class="kw">then</span>
    <span class="fu">git</span> clone https://github.com/maseek/maseek.github.io.git
<span class="kw">else</span>
    <span class="fu">git</span> pull origin master
<span class="kw">fi</span>

<span class="bu">cd</span> maseek.github.io

<span class="co"># Prepend the file names you want to keep in here with dot</span>
<span class="fu">mv</span> CNAME .CNAME
<span class="fu">mv</span> README.md .README.md

<span class="co"># Clean up</span>
<span class="fu">rm</span> -rf *

<span class="co"># Undo the name changes</span>
<span class="fu">mv</span> .CNAME CNAME
<span class="fu">mv</span> .README.md README.md

<span class="co"># Hakyll by default generates site into _site directory</span>
<span class="fu">cp</span> -rf ../../_site/* .

<span class="co"># Add all files to git</span>
<span class="fu">git</span> add --all :/
<span class="fu">git</span> add -u :/

<span class="bu">echo</span> -n <span class="st">&quot;enter commit message: &quot;</span>
<span class="bu">read</span> <span class="va">msg</span>
<span class="fu">git</span> commit -m <span class="st">&quot;</span><span class="va">$msg</span><span class="st">&quot;</span>

<span class="co"># If you are using cygwin, git push command will get stuck, so use the following command first to cofigure git to ask for password in a popup window</span>
<span class="co"># git config --global core.askpass &quot;git-gui--askpass&quot;</span>

<span class="fu">git</span> push origin master</code></pre></div>]]></summary>
</entry>
<entry>
    <title>Linux Mint in Windows 8 via VMware Player</title>
    <link href="https://tzemanovic.github.io/posts/linux-mint-in-windows-8-via-vmware-player/index.html" />
    <id>https://tzemanovic.github.io/posts/linux-mint-in-windows-8-via-vmware-player/index.html</id>
    <published>2014-03-29T00:00:00Z</published>
    <updated>2014-03-29T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>For a while I have been trying to emulate the *nix terminal in Windows 8 using cygwin, but I wanted to get the full experience, so I decided to run Linux Mint in VMware Player. The setup instructions follow.</p>
<p>First of all you need to disable Hyper-V to be able to install VMware Player. To do that run the following command from an elevated command prompt:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="ex">dism.exe</span> /Online /Disable-Feature:Microsoft-Hyper-V</code></pre></div>
<p>In case you need to enable Hyper-V again, the following undoes the changes:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="ex">dism.exe</span> /Online /Enable-Feature:Microsoft-Hyper-V /All</code></pre></div>
<p>Next, install and run <a href="https://my.vmware.com/web/vmware/free" target="_blank">VMware Player</a>.</p>
<ol style="list-style-type: decimal">
<li><p>Create a new virtual machine:</p>
<p><img src="step-1.jpg" alt="step 1"/></p></li>
<li><p>Select location of the Linux image, I went for <a href="http://www.linuxmint.com/download.php" target="_blank">Linux Mint 16 Cinnamon 64-bit</a>:</p>
<p><img src="step-2.jpg" alt="step 2"/></p></li>
<li><p>The version is Linux 3.x kernel 64-bit:</p>
<p><img src="step-3.jpg" alt="step 3"/></p></li>
<li><p>Select where you want to store the virtual machine:</p>
<p><img src="step-4.jpg" alt="step 4"/></p></li>
<li><p>Give it appropriate disk capacity, I gave mine only 8GB at fist, but ran out of it quite quickly (if you resize the capacity later on you will most-likely have to do some disk partitioning):</p>
<p><img src="step-5.jpg" alt="step 5"/></p></li>
<li><p>Before you finish you will want to customize hardware:</p>
<p><img src="step-6.jpg" alt="step 6"/></p></li>
<li><p>Select how much memory you want to use for your VM:</p>
<p><img src="step-7.jpg" alt="step 7"/></p></li>
<li><p>Enable 3D graphics acceleration from the Display settings:</p>
<p><img src="step-8.jpg" alt="step 8"/></p>
<p>And that’s you ready to roll in Linux.</p></li>
</ol>
<p>My screen resolution (1920x1080) was not listed in the display settings, here’s how I fixed it.</p>
<ol style="list-style-type: decimal">
<li>Calculate VESA CVT mode lines:</li>
</ol>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="ex">cvt</span> 1920 1080</code></pre></div>
<ol style="list-style-type: decimal">
<li>Copy the output starting from after Modeline, and prepend it with <code>xrandr –newmode</code>, e.g.:</li>
</ol>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="ex">xrandr</span> --newmode <span class="st">&quot;1920x1080_60.00&quot;</span> 173.00 1920 2048 2248 2576 1080 1083 1088 1120 -hsync +vsync</code></pre></div>
<ol style="list-style-type: decimal">
<li>and then:</li>
</ol>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="ex">xrandr</span> --addmode Virtual1 <span class="st">&quot;1920x1080_60.00&quot;</span></code></pre></div>
<ol style="list-style-type: decimal">
<li><p>Switch to console mode using <kbd>Alt</kbd>+<kbd>Ctrl</kbd>+<kbd>F1</kbd> and log in.</p></li>
<li><p>Stop Display Manager:</p></li>
</ol>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="fu">sudo</span> service mdm stop</code></pre></div>
<ol style="list-style-type: decimal">
<li>create X configuration file:</li>
</ol>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="fu">sudo</span> X -configure</code></pre></div>
<ol style="list-style-type: decimal">
<li>and start it again:</li>
</ol>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="fu">sudo</span> service mdm start</code></pre></div>
<ol style="list-style-type: decimal">
<li>Switch to back to the desktop mode using <kbd>Alt</kbd>+<kbd>Ctrl</kbd>+<kbd>F7</kbd>.</li>
</ol>]]></summary>
</entry>

</feed>
